Step-by-Step Approach

    Text Widget:
        Implement the Text widget to display text with customizable styles.

    Image Widget:
        Implement the Image widget to display images from various sources (local files, URLs).

    Icon Widget:
        Implement the Icon widget to display icons from a set of predefined icons or custom icons.

    Buttons:
        Implement different types of buttons (TextButton, ElevatedButton, IconButton) with customizable styles and actions.

    ListView Widget:
        Implement the ListView widget to display a scrollable list of items.

    GridView Widget:
        Implement the GridView widget to display a scrollable grid of items.

    Stack Widget:
        Implement the Stack widget to overlay widgets on top of each other.

    Expanded Widget:
        Implement the Expanded widget to allow a child to expand to fill available space within a Row or Column.

    Spacer Widget:
        Implement the Spacer widget to create adjustable empty space within a Row or Column.

    Scaffold Widget:
        Implement the Scaffold widget to provide a basic material design visual structure (e.g., app bar, body, floating action button).


Scaffold Properties

Here's a comprehensive list of Scaffold's properties:
Core Properties

    appBar: An AppBar to display at the top of the screen.
    body: The main content of the Scaffold.
    floatingActionButton: A FloatingActionButton to display at the bottom right of the screen.
    floatingActionButtonLocation: The location of the FloatingActionButton.
    persistentFooterButtons: A list of buttons to display at the bottom of the Scaffold.
    drawer: A Drawer to display when the user opens the navigation menu.
    endDrawer: A Drawer to display when the user opens the navigation menu from the right.
    bottomNavigationBar: A BottomNavigationBar to display at the bottom of the screen.
    backgroundColor: The background color of the Scaffold.
    resizeToAvoidBottomInset: Whether the Scaffold should resize to avoid overlapping the bottom inset (e.g., keyboard).
    primary: Whether the Scaffold is the primary content view of the screen.
    extendBodyBehindAppBar: Whether the body should extend behind the AppBar.
    drawerEnableOpenDragGesture: Whether the drawer can be opened by dragging from the edge.
    endDrawerEnableOpenDragGesture: Whether the endDrawer can be opened by dragging from the edge.
    drawerScrimColor: The color of the scrim overlaying the content when the drawer is open.
    endDrawerScrimColor: The color of the scrim overlaying the content when the endDrawer is open.
    drawerEdgeDragWidth: The width of the edge area that can be dragged to open the drawer.
    endDrawerEdgeDragWidth: The width of the edge area that can be dragged to open the endDrawer.
    bottomSheet: A BottomSheet to display at the bottom of the screen.
    snackBar: A SnackBar to display at the bottom of the screen.

Additional Properties

    key: A GlobalKey to uniquely identify the Scaffold.
    onDrawerChanged: A callback invoked when the drawer is opened or closed.
    onEndDrawerChanged: A callback invoked when the endDrawer is opened or closed.
    restorationId: A restoration ID for the Scaffold.
    semanticsLabel: A semantic label for the Scaffold.



    AppBar Properties in Flutter

The AppBar widget in Flutter offers a plethora of properties to customize its appearance and behavior. Here's a comprehensive list:
Core Properties

    leading: A widget placed at the start of the app bar. Often used for navigation icons like back buttons.
    title: The main content of the app bar. Typically a Text widget, but can be any widget.
    actions: A list of widgets placed at the end of the app bar, often used for action buttons like search, settings, etc.
    backgroundColor: Sets the background color of the app bar.
    elevation: Controls the shadow elevation of the app bar.
    centerTitle: Whether to center the title.
    iconTheme: Sets the icon theme for icons within the app bar.
    titleSpacing: The spacing between the leading widget and the title.
    toolbarHeight: The height of the app bar's toolbar.
    toolbarOpacity: The opacity of the app bar's toolbar.
    flexibleSpace: A widget that fills the remaining space in the app bar when it's expanded. Used in SliverAppBar.
    bottom: A widget placed at the bottom of the app bar, often used for TabBar.

Additional Properties

    primary: Whether the app bar is a primary app bar (affects system UI insets).
    automaticallyImplyLeading: Whether to automatically add a leading widget based on the current screen.
    excludeHeaderSemantics: Whether to exclude the app bar from the semantics tree.
    forceMaterialTransparency: Whether to force material transparency.
    scrolledUnderElevation: The elevation of the app bar when scrolled under content.
    shadowColor: The color of the app bar's shadow.
    shape: The shape of the app bar.
    surfaceTintColor: The surface tint color of the app bar.
    systemOverlayStyle: The style of system UI overlays (status bar and navigation bar).
    titleTextStyle: The text style for the title.
    toolbarTextStyle: The text style for the toolbar's text.



   app-Bar: It displays a horizontal bar which mainly placed at the top of the Scaffold. appBar uses the widget AppBar which has its own properties like elevation, title, brightness, etc. 
   body: It will display the main or primary content in the Scaffold. It is below the appBar and under the floatingActionButton. The widgets inside the body are at the left-corner by default. 
   floatingActionButton: FloatingActionButton is a button that is placed at the right bottom corner by default. FloatingActionButton is an icon button that floats over the content of the screen at a fixed place. If we scroll the page its position wonâ€™t change, it will be fixed.
   drawer: drawer is a slider menu or a panel which is displayed at the side of the Scaffold. The user has to swipe left to right or right to left according to the action defined to access the drawer menu. In the Appbar, an appropriate icon for the drawer is set automatically at a particular position. The gesture to open the drawer is also set automatically. It is handled by the Scaffold. 
   bottomNavigationBar: bottomNavigationBar is like a menu at the bottom of the Scaffold. We have seen this navigationbar in most of the applications. We can add multiple icons or texts or both in the bar as items. 
    backgroundColor: used to set the color of the whole Scaffold widget.
    floatingActionButtonAnimator: used to provide animation to move floatingActionButton.
    primary: to tell whether the Scaffold will be displayed or not.
    drawerScrimColor: used to define the color for the primary content while a drawer is open.
    bottomSheet: This property takes in a widget  (final) as the object to display it at the bottom of the screen.
    drawerDragStartBehaviour: This property holds DragStartBehavior enum as the object to determine the drag behaviour of the drawer.
    drawerEdgeDragWidth: This determines the area under which a swipe or a drag will result in the opening of the drawer. And it takes in a double as the object.
    drawerEnableOpenGesture: This property holds in a boolean value as the object to determine the drag gesture will open the drawer or not, by default it is set to true.
    endDrawer: The endDrawer property takes in a widget as the parameter. It is similar to the Drawer, except the fact it opens in the opposite direction.
    endDrawerEnableOpenGesture: Again this property takes in a boolean value as the object to determine whether the drag gesture will open the endDrawer or not.
    extendBody: The extendBody property takes in a boolean as the object. By default, this property is always false but it must not be null. If it is set to true in the presence of a bottomNavigationBar or persistentFooterButtons, then the height of these is added to the body and they are shifted beneath the body.
    extendBodyBehindAppBar:  This property also takes in a boolean as the object. By default, this property is always false but it must not be null. If it is set to true the app-Bar instead of being on the body is extended above it and its height is added to the body. This property is used when the color of the app-Bar is not fully opaque.
    floating Action Button Location: This property is responsible for the location of the floating Action Button.
    persistent Footer Button: This property takes in a list of widgets. Which are usually buttons that are displayed underneath the scaffold.
    resize To Avoid Bottom Insets: This property takes in a Boolean value as the object. If set to true then the floating widgets on the scaffold resize themselves to avoid getting in the way of the on-screen keyboard.
